name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🔍 Test Application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-flask flake8 black

    - name: 🎨 Code formatting check (Black)
      run: |
        black --check --diff .

    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: 🧪 Run tests with pytest
      run: |
        # Create a test config file
        cp config_template.py config.py
        sed -i 's/YOUR_API_KEY_HERE/test_api_key/g' config.py
        sed -i 's/YOUR_SENDER_ID/TestSender/g' config.py
        sed -i 's/https:\/\/qd9ver.api.infobip.com/https:\/\/test.api.infobip.com/g' config.py
        
        # Run tests with coverage
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: false

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit

    - name: 🛡️ Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

    - name: 🔍 Check for known vulnerabilities
      run: |
        safety check --json || true
        pip-audit --format=json --output=pip-audit-report.json || true

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🏗️ Build application
      run: |
        # Create config for testing
        cp config_template.py config.py
        # Test import
        python -c "import app; print('✅ Application imports successfully')"
        python -c "import sms_application; print('✅ SMS client imports successfully')"

    - name: 🧪 Test web application startup
      run: |
        # Test if Flask app can start
        timeout 10s python -c "
        import app
        print('✅ Flask application configured successfully')
        " || echo "⚠️ App startup test completed"

  lighthouse:
    name: 🚦 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🌐 Start Flask app
      run: |
        cp config_template.py config.py
        sed -i 's/YOUR_API_KEY_HERE/test_api_key/g' config.py
        sed -i 's/YOUR_SENDER_ID/TestSender/g' config.py
        python app.py &
        sleep 5
        curl -f http://localhost:5000 || echo "App started"
      
    - name: 🚦 Run Lighthouse
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          http://localhost:5000
        configPath: './.github/lighthouse/lighthouse.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

