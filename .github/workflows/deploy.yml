name: 🚀 Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'

jobs:
  deploy-docker:
    name: 🐳 Deploy with Docker
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/sms-web-app:latest
          ${{ secrets.DOCKER_USERNAME }}/sms-web-app:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-heroku:
    name: 🚀 Deploy to Heroku
    runs-on: ubuntu-latest
    environment:
      name: heroku-${{ github.event.inputs.environment || 'production' }}
      url: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        env_file: ".env.production"

  deploy-digitalocean:
    name: 🌊 Deploy to DigitalOcean
    runs-on: ubuntu-latest
    environment:
      name: digitalocean-${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to DigitalOcean App Platform
      uses: digitalocean/app_action@v1.1.5
      with:
        app_name: sms-web-application
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  deploy-aws:
    name: ☁️ Deploy to AWS
    runs-on: ubuntu-latest
    environment:
      name: aws-${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☁️ Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 🚀 Deploy to AWS Elastic Beanstalk
      run: |
        # Install EB CLI
        pip install awsebcli
        
        # Initialize EB application
        eb init sms-web-app --region ${{ secrets.AWS_REGION }} --platform python-3.11
        
        # Deploy
        eb deploy ${{ github.event.inputs.environment || 'production' }}

  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-docker, deploy-heroku, deploy-digitalocean, deploy-aws]
    if: always()
    
    steps:
    - name: 📢 Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

    - name: 📧 Send email notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "SMS Web App Deployment ${{ job.status }}"
        body: |
          Deployment Status: ${{ job.status }}
          Environment: ${{ github.event.inputs.environment || 'production' }}
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: SMS Web App CI/CD
      if: always()

